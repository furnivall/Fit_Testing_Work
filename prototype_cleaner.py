"""This file takes the raw data generated by the eform and does some cleaning tasks - separating each test into an
individual row. """

import pandas as pd
from datetime import timedelta
import re

# read in data
df = pd.read_csv('Y:/eForm Returns/TodaysReferrals2020-07-09.csv')



'''Drop columns as defined by CR - subject to change'''
df = df.drop(columns=['Spectacles1st', 'Goggles1st', 'HearingAid1st', 'Other1st', 'Spectacles2nd',
       'Goggles2nd', 'HearingAid2nd', 'Other2nd', 'Spectacles3rd', 'Goggles3rd', 'HearingAid3rd','Other3rd',
       'Ownership1st','Condition1st', 'Help1st', 'HelpDetails1st', 'Ownership2nd','Condition2nd', 'Help2nd',
       'HelpDetails2nd','Ownership3rd', 'Condition3rd','Help3rd', 'HelpDetails3rd',
       'Whichactivitydidtestfailat1', 'If fail, What was the reason', 'another test1st',
       'Whichactivitydidtestfailat2', 'If fail, What was the reason2nd', 'another test2nd',
                      'If fail, What was the reason3rd'])

def third_test(third_test_data):
    '''Capture the third test from those who have been tested three times'''
    third_test_data = third_test_data.drop(columns=['Make1st', 'Model1st',
           'Type of Test1st', 'Overall Test Outcome1st', 'Make2nd', 'Model2nd',
           'Type of Test2nd', 'Overall Test Outcome2nd'])

    third_test_data.rename(columns={'Make3rd':'Make', 'Model3rd':'Model', 'Type of Test3rd':'Type of Test',
                                'Overall Test Outcome3rd':'Overall Test Outcome'}, inplace=True)
    return third_test_data

def second_test(second_test_data):
    '''Captures a second test for anyone who's done two tests'''
    second_test_data = second_test_data.drop(columns=['Make1st', 'Model1st',
                                    'Type of Test1st', 'Overall Test Outcome1st', 'Make3rd', 'Model3rd',
                                    'Type of Test3rd', 'Overall Test Outcome3rd'])
    second_test_data.rename(columns={'Make2nd': 'Make', 'Model2nd': 'Model', 'Type of Test2nd': 'Type of Test',
                                'Overall Test Outcome2nd': 'Overall Test Outcome'}, inplace=True)
    return second_test_data

def first_test(first_test_data):
    '''Turns a first test extract into final format'''
    first_test_data = first_test_data.drop(columns=['Make2nd', 'Model2nd', 'Type of Test2nd', 'Overall Test Outcome2nd',
                                      'Make3rd', 'Model3rd', 'Type of Test3rd', 'Overall Test Outcome3rd'])
    first_test_data.rename(columns={'Make1st':'Make', 'Model1st':'Model','Type of Test1st':'Type of Test',
                             'Overall Test Outcome1st':'Overall Test Outcome'}, inplace=True)

    return first_test_data

def date_changes(df):
    '''Changes all date fields into datetimes, allowing them to be sorted etc'''
    for date_field in ['Date Submitted', 'Date of staff FIT Test', 'Staff DOB']:
        df[date_field] = pd.to_datetime(df[date_field], dayfirst=True)
    return df

def date_tests(df):
    '''Find everyone who is outside of the allowed date range'''
    print(df.columns)
    future_testers = df[df['Date of staff FIT Test'] > df['Date Submitted']]
    print(f'Number of tests occurring after submitted date : {len(future_testers)}')
    future_testers['Error'] = 'Error - fit test date in future'
    three_years = df[(df['Date Submitted'] - df['Date of staff FIT Test']) / timedelta(days=365) > 3]
    three_years['Error'] = 'Error - fit test date older than 3 years'

    return future_testers, three_years

def model_make_tests(df):
    print(df['Make'].value_counts(dropna=False))
    wrong_make = df[~df['Make'].isin(['3M', 'Alpha Solway', 'Arco', 'Honeywell', 'UCAIR UFCH-P3V'])]
    wrong_make['Error'] = "Error - mask Make incorrect/not provided"

    wrong_model = df[~df['Model'].isin(['1863', '1863+', '1873V', '8833', '3030V', 'S-3V', '1A0600', 'SuperOne3208',
                                        'UCAIR UCFH-P3V'])]
    wrong_model['Error'] = 'Error - mask Model incorrect/not provided'
    return wrong_make, wrong_model

def regex_fields(df):
    print(df.columns)
    'Unique Identifier'
    'National Insurance Number'
    'eESS number'
    NI_regex = re.compile('[A-CEGHJ-NOPR-TW-Z]{2}[0-9]{6}[ABCD\s]{1}')

    eESS_regex = re.compile('[\d]{8}')
    pay_number_regex = re.compile('[^a-z]{1}[\d]{7}')


# deal with all people with only one test (the easy ones)
one_test = df[(df['Make2nd'].isnull()) & (df['Make3rd'].isnull())]
data_onetest = first_test(one_test)

# deal with people with two tests
two_tests = df[(df['Make2nd'].notnull()) & (df['Make3rd'].isnull())]
# this produces the first test for those with two tests
data_twotests_first_test = first_test(two_tests)
# this produces the second test for those with two tests
data_twotests_second_test = second_test(two_tests)

# deal with people with three tests
three_tests = df[df['Make3rd'].notnull()]
data_threetests_first_test = first_test(three_tests)
data_threetests_second_test = second_test(three_tests)
data_threetests_third_test = third_test(three_tests)

# combine datasets into final one
final_data = pd.concat([data_onetest, data_twotests_first_test, data_twotests_second_test, data_threetests_first_test,
                        data_threetests_second_test, data_threetests_third_test])
# show feedback
print(f'Final dataframe includes {len(final_data)} total tests from {len(df)} initial records')

# sort data
final_data.sort_values(by='ID', inplace=True)

# deal with dates
final_data = date_changes(final_data)

# run date tests
future_dates, three_years = date_tests(final_data)

# run model/make tests
wrong_date, wrong_model = model_make_tests(final_data)

# run regex tests
regex_fields(final_data)

errors = pd.DataFrame()
for i in [wrong_date, wrong_model, future_dates, three_years]:
    errors = errors.append(i, ignore_index=True)

#add error sheet
today = pd.Timestamp.now().strftime('%d-%m-%Y')
with pd.ExcelWriter('Y:/Danny-Cleaned/'+today+'-cleaned_data.xlsx') as writer:
    final_data.to_excel(writer, sheet_name='data', index=False)
    errors.to_excel(writer, sheet_name='errors')

# build excel file

